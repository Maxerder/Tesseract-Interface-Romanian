#python -m venv my_venv
#.\my_venv/Scripts\activate ### powershell(run as adm) Set-ExecutionPolicy Unrestricted -> A

# pip install pytesseract pillow
# pip install pyperclip
# pip install tkinterdnd2 
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinterdnd2 import TkinterDnD, DND_FILES
from PIL import Image
import pytesseract
import os
import pyperclip


# Specifică calea către executabilul Tesseract
pytesseract.pytesseract.tesseract_cmd = r'YOURPATH TO TESESRACT FOLDER\tesseract.exe'  # Pe Windows
# pytesseract.pytesseract.tesseract_cmd = '/usr/local/bin/tesseract'  # Pe macOS/Linux

# Funcția pentru a selecta mai multe fișiere imagine
def select_files():
    file_paths = filedialog.askopenfilenames(
        filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp;*.tiff")]
    )
    if file_paths:
        entry_file_paths.delete(0, tk.END)
        entry_file_paths.insert(0, ";".join(file_paths))

# Funcția pentru a rula Tesseract OCR pe fișierele selectate
def run_ocr():
    file_paths = entry_file_paths.get()
    if not file_paths:
        messagebox.showerror("Error", "Please select image files.")
        return
    
    file_paths = file_paths.split(";")
    text_output.delete(1.0, tk.END)
    
    for file_path in file_paths:
        try:
            # Verifică dacă fișierul există
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"The selected file does not exist: {file_path}")
            
            # Verifică permisiunile de citire pentru fișierul imagine
            if not os.access(file_path, os.R_OK):
                raise PermissionError(f"You don't have permission to read this file: {file_path}")
            
            # Verifică permisiunile de executare pentru Tesseract
            if not os.access(pytesseract.pytesseract.tesseract_cmd, os.X_OK):
                raise PermissionError("You don't have permission to execute Tesseract.")
            
            img = Image.open(file_path)
            text = pytesseract.image_to_string(img, lang='ron')  # Specifică limba română
            text_output.insert(tk.END, f"Output for {file_path}:\n{text}\n{'-'*60}\n")
        except FileNotFoundError as e:
            messagebox.showerror("File Error", str(e))
        except PermissionError as e:
            messagebox.showerror("Permission Error", str(e))
        except Exception as e:
            messagebox.showerror("Error", f"Failed to process image: {str(e)}")

# Funcția pentru a lipi fișierele din clipboard
def paste_files(event=None):
    try:
        clipboard_content = pyperclip.paste()
        file_paths = clipboard_content.splitlines()
        valid_file_paths = [file_path for file_path in file_paths if os.path.isfile(file_path)]
        
        if valid_file_paths:
            existing_paths = entry_file_paths.get()
            if existing_paths:
                existing_paths = existing_paths.split(";")
                valid_file_paths.extend(existing_paths)
            entry_file_paths.delete(0, tk.END)
            entry_file_paths.insert(0, ";".join(valid_file_paths))
        else:
            messagebox.showerror("Error", "Clipboard does not contain valid file paths.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to paste files: {str(e)}")

# Funcția pentru a gestiona fișierele adăugate prin drag-and-drop
def drop_files(event):
    try:
        dropped_files = root.tk.splitlist(event.data)
        valid_file_paths = [file_path for file_path in dropped_files if os.path.isfile(file_path)]
        
        if valid_file_paths:
            existing_paths = entry_file_paths.get()
            if existing_paths:
                existing_paths = existing_paths.split(";")
                valid_file_paths.extend(existing_paths)
            entry_file_paths.delete(0, tk.END)
            entry_file_paths.insert(0, ";".join(valid_file_paths))
        else:
            messagebox.showerror("Error", "Dropped content does not contain valid file paths.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to process dropped files: {str(e)}")

# Configurarea ferestrei principale
root = TkinterDnD.Tk()
root.title("Tesseract OCR GUI")

frame = tk.Frame(root, padx=10, pady=10)
frame.pack(fill=tk.BOTH, expand=True)

label_file_paths = tk.Label(frame, text="Image Files:")
label_file_paths.grid(row=0, column=0, sticky=tk.W)

entry_file_paths = tk.Entry(frame, width=50)
entry_file_paths.grid(row=0, column=1, padx=5, pady=5)

button_browse = tk.Button(frame, text="Browse", command=select_files)
button_browse.grid(row=0, column=2, padx=5, pady=5)

button_run = tk.Button(frame, text="Run OCR", command=run_ocr)
button_run.grid(row=1, column=0, columnspan=3, pady=10)

text_output = tk.Text(frame, wrap=tk.WORD, height=45)
text_output.grid(row=2, column=0, columnspan=3, padx=5, pady=5)

# Asociază Ctrl + V pentru a lipi fișierele
root.bind('<Control-v>', paste_files)

# Configurarea pentru drag-and-drop
root.drop_target_register(DND_FILES)
root.dnd_bind('<<Drop>>', drop_files)

# Rulare aplicație
root.mainloop()
